步骤:
第一:目标对象的定义
第二:具体的目标对象的定义
第三:观察者的接口定义
第四:观察者的具体实现


－－－－－－－－－－－－－－－－－－－－－－－－－
1.目标与观察者之间的关系
   一对一关系
   一对多
2.单项依赖
   观察者依赖目标
3.命名建议
   目标接口定义 建议名称后面跟上Subject
   观察者接口定义 建议在名称后面跟Observer
   观察者借口的更新方法 建议命名为update
4.触发通知的时机
   先设置更新内容 后通知
5.观察者模式的调用顺序示意图
  --- 准备阶段
   1.创建目标对象
   2.创建观察者对象
   3.向目标对象注册观察者对象

  --- 运行阶段
   1.改变目标对象的状态
     1.1通知所有注册的观察者对象进行相应的处理
     1.2回调目标对象，获取相应的数据

6.通知的顺序
   观察者通知顺序是平行的 无顺序可言

－－－－－－－－－－－－－－－－－－－－－－－
实现的2种方式:推模型／拉模型
推模型:目标对象主动向观察者推送目标的详细信息,推送的信息通常是目标对象的全部或部分数据
拉模型:目标对象在通知观察者的时候,只传递少量信息,如果观察者需要更具体的信息,由观察者主动到目标对象中获取,相当于是观察者从目标对象中拉数据
      一般这种模型的实现中,会把目标对象自身通过update方法传递给观察者
比较:
     推模型是嘉定目标对象知道观察者需要的数据(会是观察者对象难以复用)
     拉模型是目标对象不知道观察者具体需要什么数据,因此把自身传给观察者,由观察者取值(update方法是目标对象本身,基本适应各种情况的需要)


---------------------------------------
观察者优点：
 1.观察者模式实现了观察者和目标之间的抽象耦合
 2.观察者模式实现了动态联动
 3.观察者模式支持广播通信

 缺点:
 1.可能引起无谓的操作


---------------------------------------
 观察者模式参考使用场景:
 1.当一个抽象模型有2各方面，其中一方面的操作依赖于另一个方面的状态变化
 2.如果在更改一个对象的时候，需要同时连带改变其他的对象，而且不知道究竟应该有多少对象需要被连带改变
 3.当一个对象必须通知其他对象，但是你有希望这个对象和其他被它筒子的对象是松散耦合的