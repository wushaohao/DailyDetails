工厂模式概念:
    1.实例化对象，用工厂方代替newcaozuo
    2.工厂模式包括工厂方法模式和抽象工厂模式
    3.抽象工厂模式是工厂方法模式的扩展
工厂模式意图:
    定义一个接口来创建对象，但是让子类来决定哪些类需要被实例化，工厂方法把实例化的工作推迟到子类中实现

什么情况下适合工厂模式
   1.有一组类似的对象需要创建
   2.在编码时不能预见需要创建哪种类的实例
   3.系统需要考虑扩展性，不应依赖于产品类实例如何被创建、组合和表达细节

    系统经常面临着"对象"的创建工作，由于需求的变化，这个对象可能随之也会发生变化，但它却有着比较稳定的接口，为此，我们需要提供一种封装机制来隔离出这个易变对象的变化，从而保持
系统中其他依赖该对象的对象不随着需求变化而变化。
     1.尽量松耦合，一个对象的依赖对象的变化与本身无关
     2.具体产品与客户端剥离，责任分割

Spring BeanFactory
BeanFactory，作为Spring基础的IOC容器，是Spring的一个Bean工厂。如果单从工厂模式的角度思考，它就是用来"生产Bean"，然后提供给客户端

Bean实例化过程如下:
     1.调用Bean的默认构造方法，或指定构造方法，生成bean实例(instance1)
     2.如果Bean配置文件中注入了Bean属性值，则在instance1基础上进行属性注入形成instance2，这种注入是覆盖性的
     3.如果Bean实现了Initializing Bean接口，则调用afterPropertiesSet()方法来改变或操作instance2，得到instance3
     4.如果Bean的配置文件中指定了init-method="init"属性，则会调用指定的初始化方法，则在instance3的基础上调用初始化方法init(),将对象最终初始化为instance4；当然这个初始化的
名称是任意的


工厂方法模式和抽象工厂模式对比：
    1.工厂模式是一种极端情况的抽象工厂模式，而抽象工厂模式可以看成是工厂模式的推广
    2.工厂模式用来创建一个产品的等级结构，而抽象工厂模式是用来创建多个产品的等级结构
    3.工厂模式只有一个抽象产品类，而抽象工厂有多个抽象产品类
